{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TcnTWH9gEv0x"
   },
   "source": [
    "# Assignment 3\n",
    "## By - Sanchana Mohankumar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EbUfnHzjE5dh"
   },
   "source": [
    "# Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HOkU7Ha_HCG4"
   },
   "outputs": [],
   "source": [
    "!pip install emoji\n",
    "!pip install sweetviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "SkLgCAUPEOE6",
    "outputId": "27caa94c-97e1-4d58-ae63-853bb30ddc60"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "#Libraries\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from collections import Counter\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import array\n",
    "from numpy import asarray\n",
    "from numpy import zeros\n",
    "import re\n",
    "\n",
    "#library to remove emoji\n",
    "from emoji import demojize\n",
    "\n",
    "#libraries for plots\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#nltk libraries\n",
    "\n",
    "import nltk\n",
    "nltk.download('omw-1.4')\n",
    "#extracting punctuation and adding to list\n",
    "from string import punctuation \n",
    "#Custom Punctuation\n",
    "custom_punc = ',“”\"!#$%&\\'()*+-\\./:;<=>?@[\\\\]^_`{|}~—ー‘’•–'\n",
    "\n",
    "#word and sentence tokenize\n",
    "import nltk.data\n",
    "nltk.download('punkt')\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from nltk.tokenize import WordPunctTokenizer  # tokenizes punctuation also\n",
    "tokenizer = nltk.data.load('tokenizers/punkt/PY3/english.pickle') #sentence tokenizer\n",
    "\n",
    "#keras\n",
    "from keras.preprocessing.text import text_to_word_sequence # tokenizes and removes punctuation\n",
    "\n",
    "#Downloading nltk stopwords\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "stop_words = set(stopwords.words('english'))\n",
    "from gensim.parsing.preprocessing import remove_stopwords\n",
    "\n",
    "#Stemming\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "stemmer = PorterStemmer()\n",
    "\n",
    "#Lemmatizing\n",
    "nltk.download('wordnet')\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "#Padding\n",
    "import tensorflow as tf\n",
    "#from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "#Bag of words(Count vectorizer)\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "#Tf-idf\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "v = TfidfVectorizer()\n",
    "\n",
    "#svm model\n",
    "from sklearn import svm\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "from keras.preprocessing.text import one_hot\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Activation, Dropout, Dense\n",
    "from keras.layers import Flatten, LSTM, Bidirectional\n",
    "from keras.layers import GlobalMaxPooling1D\n",
    "from keras.layers.embeddings import Embedding\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "\n",
    "\n",
    "#Bi LSTM Attention Layer\n",
    "from tensorflow.keras.layers import Layer\n",
    "from tensorflow.keras import backend as K\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "g2TRf6W7E8fp"
   },
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1eV3YzQ4DjTc",
    "outputId": "e9017ab7-9d81-4e82-8250-99100c900895"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {
    "id": "pIXMvJf0EoqM"
   },
   "outputs": [],
   "source": [
    "text1 = pd.read_csv(\"/content/drive/MyDrive/Assignment_3/spam.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {
    "id": "JVukVSaRFJnP"
   },
   "outputs": [],
   "source": [
    "class spamham:\n",
    "      def __init__(self, dataframe):\n",
    "          self.dataframe = dataframe\n",
    "\n",
    "      def eda(self):\n",
    "           ax = sns.countplot(x = 'label', data = self.dataframe, palette = 'magma')\n",
    "           for p in ax.patches:\n",
    "               ax.annotate(f'\\n{p.get_height()}', (p.get_x()+0.2, p.get_height()), ha='center', va='top', color='white', size=18)\n",
    "               ax.set(title = \"Message data\")\n",
    "           return ax\n",
    "        \n",
    "      def sentence_preprocess(self, word):\n",
    "           \"\"\" Sentence Preprocessing\n",
    "        \n",
    "           Returns:\n",
    "           List of sentences in each tweet\n",
    "           \"\"\"\n",
    "           word = word.lower()\n",
    "           word = re.sub(r\"\\b[0-9]+\\b\\s*\", \"\",word) # Remove numbers\n",
    "           word = re.sub(r\"https?://\\S+\", \"\", word) # Remove hyperlinks\n",
    "           word = re.sub(f\"[{re.escape(custom_punc)}]\", \"\", word) #Remove punctuation\n",
    "           word = demojize(word) # Remove emoji\n",
    "           word = word.split() \n",
    "           word = [t for t in word if not t in stop_words] # Remove stopwords\n",
    "           word = [lemmatizer.lemmatize(text) for text in word] #word lemmatize\n",
    "           word = ' '.join(word)\n",
    "           return word\n",
    "\n",
    "      def clean_text(self):\n",
    "           self.dataframe['clean_text'] = self.dataframe['text'].apply(lambda x: self.sentence_preprocess(x))\n",
    "           return self.dataframe['clean_text'] #returning clean text after data preprocessing column text\n",
    "      \n",
    "      def encode_ylabel(self):\n",
    "           self.dataframe['encoded_label'] = self.dataframe['label'].replace(['spam','ham'],[0, 1])\n",
    "           return self.dataframe['encoded_label'] #returning encoded_label after converting spam to 0 and ham to 1\n",
    "\n",
    "      def tokenize_padding(self):\n",
    "           token = Tokenizer() #Initialize the tokenizer (set here so all of the datasets are in the same tokenizer)\n",
    "           token.fit_on_texts(self.clean_text())\n",
    "           print(\"vocab_size:\", len(token.word_index) + 1)\n",
    "           texts = token.texts_to_sequences(self.clean_text()) #Convert the tweets into sequences for keras to use\n",
    "           texts = pad_sequences(texts, padding='post', maxlen = 100)\n",
    "           self.dataframe[\"messageSequence\"] = list(texts)\n",
    "           return self.dataframe[\"messageSequence\"]\n",
    "\n",
    "      def show_performance_plot(self, x):\n",
    "          #show the model accuracy\n",
    "          plt.plot(history.history['accuracy'])\n",
    "          plt.plot(history.history['val_accuracy'])\n",
    "\n",
    "          plt.title('model accuracy')\n",
    "          plt.ylabel('accuracy')\n",
    "          plt.xlabel('epoch')\n",
    "          plt.legend(['train','test'], loc='upper left')\n",
    "          plt.show()\n",
    "\n",
    "          #show model loss\n",
    "          plt.plot(history.history['loss'])\n",
    "          plt.plot(history.history['val_loss'])\n",
    "\n",
    "          plt.title('model loss')\n",
    "          plt.ylabel('loss')\n",
    "          plt.xlabel('epoch')\n",
    "          plt.legend(['train','test'], loc='upper left')\n",
    "          plt.show()\n",
    "\n",
    "class Attention(Layer):\n",
    "    \n",
    "    def __init__(self, return_sequences=True):\n",
    "        self.return_sequences = return_sequences\n",
    "        super(Attention,self).__init__()\n",
    "        \n",
    "    def build(self, input_shape):\n",
    "        \n",
    "        self.W=self.add_weight(name=\"att_weight\", shape=(input_shape[-1],1),\n",
    "                               initializer=\"normal\")\n",
    "        self.b=self.add_weight(name=\"att_bias\", shape=(input_shape[1],1),\n",
    "                               initializer=\"zeros\")\n",
    "        \n",
    "        super(Attention,self).build(input_shape)\n",
    "        \n",
    "    def call(self, x):\n",
    "        \n",
    "        e = K.tanh(K.dot(x,self.W)+self.b)\n",
    "        a = K.softmax(e, axis=1)\n",
    "        output = x*a\n",
    "        \n",
    "        if self.return_sequences:\n",
    "            return output\n",
    "        \n",
    "        return K.sum(output, axis=1)\n",
    "\n",
    "      \n",
    "p1 = spamham(text) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GDLv9-Qcdfb_"
   },
   "source": [
    "# EDA\n",
    "As we know in modern world we use social network for regularly, but with fast pace world when we come across spam notifications we tend to not notice spam notifications which is huge cybersecurity threat\n",
    "\n",
    "- Dataset shows around 4825 ham and 747 spam data\n",
    "\n",
    "As we can see in the below plot the distribution of data is inconsistent which may lead to poor model performance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "hM7LGjXoeqSl",
    "outputId": "6bb3e687-36f7-4152-baad-f26ae999d0d5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f58683e0650>"
      ]
     },
     "execution_count": 388,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p1.eda()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vtwiiBhue3e2"
   },
   "source": [
    "### Dataframe shape\n",
    "Dataframe review has 5572 rows and 2 columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "26xhHMg0eypw",
    "outputId": "1ccdb5e1-d379-4055-9053-4170ef57f6b9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5572, 2)"
      ]
     },
     "execution_count": 389,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text1.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "St5RY5B6fBHh"
   },
   "source": [
    "### Info\n",
    "General information of dataset As we can see there are no missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "L41A4U-OfAme",
    "outputId": "0874fc43-517a-4a0b-a756-b1be9106b06b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5572 entries, 0 to 5571\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   label   5572 non-null   object\n",
      " 1   text    5572 non-null   object\n",
      "dtypes: object(2)\n",
      "memory usage: 87.2+ KB\n"
     ]
    }
   ],
   "source": [
    "text1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zuM9FT6Rh-Xt"
   },
   "source": [
    "### Dropping Duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JpyVUrNtgn20",
    "outputId": "cfb06703-b33e-48e4-adf7-8c6524373356"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5158, 2)"
      ]
     },
     "execution_count": 391,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text = text1.drop_duplicates()\n",
    "text.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 67,
     "referenced_widgets": [
      "7ab13ccd7a5944eaa920923eb8143bdb",
      "bc579b4c30804ac2bd8574a608616659",
      "99bb7bb3e4c346b1aede7f787e2514e4",
      "35bd378e557646fb8f302ce2ebc6b914",
      "527311998d024e359dd34e925411d739",
      "9f577cca3a654a17b73db13448d6d9b4",
      "c800b1ed53c14d379f5f763f758ec802",
      "299a58ce33d54e8d9aa45eb1ac5bf32b",
      "95e44dfbf6e341a0a40832e6b2952577",
      "12fee48283b64e6da6ef0e2320817487",
      "3ef763d244644aa69d7c368359fa7fb3"
     ]
    },
    "id": "LvunA28PXv4N",
    "outputId": "f4ffe0a7-2da1-4088-e91a-9b2067182d96"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ab13ccd7a5944eaa920923eb8143bdb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "                                             |          | [  0%]   00:00 -> (? left)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Report output.html was generated! NOTEBOOK/COLAB USERS: the web browser MAY not pop up, regardless, the report IS saved in your notebook/colab files.\n"
     ]
    }
   ],
   "source": [
    "import sweetviz as sv\n",
    "report = sv.analyze(text)\n",
    "report.show_html(\"output.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QpP-Drbxcxco"
   },
   "source": [
    "# Text Preprocessing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WgqFtXYHdYxS"
   },
   "source": [
    "Raw data exported from dataframe which consist of column Text and label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "H3BLWEuSc2nU",
    "outputId": "25c6d360-1e06-4137-e631-c2f20b99fbae"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-51968ba5-8441-4c2c-95b3-02ad59b16654\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51968ba5-8441-4c2c-95b3-02ad59b16654')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-51968ba5-8441-4c2c-95b3-02ad59b16654 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-51968ba5-8441-4c2c-95b3-02ad59b16654');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "  label                                               text\n",
       "0   ham  Go until jurong point, crazy.. Available only ...\n",
       "1   ham                      Ok lar... Joking wif u oni...\n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
       "3   ham  U dun say so early hor... U c already then say...\n",
       "4   ham  Nah I don't think he goes to usf, he lives aro..."
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text.head()  # Raw data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CaSElJeBfQ6Q"
   },
   "source": [
    "- Data is preprocessed where we have executed the following commands on column text\n",
    "1. Removed Numbers\n",
    "2. Removed Hyperlinks\n",
    "3. Removed Punctuation\n",
    "4. Removed stopwords\n",
    "5. Removed emoji\n",
    "6. Lemmatized words\n",
    "- Further for column label we have encoded spam as 0 and ham as 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vTBr7nKhcpxd",
    "outputId": "e9ab2e8b-41cd-4f2b-87a6-32dddf6e0e52"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    go jurong point crazy available bugis n great ...\n",
       "1                              ok lar joking wif u oni\n",
       "2    free entry wkly comp win fa cup final tkts 21s...\n",
       "3                  u dun say early hor u c already say\n",
       "4             nah dont think go usf life around though\n",
       "Name: clean_text, dtype: object"
      ]
     },
     "execution_count": 394,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1.clean_text().head() # Data Preprocessed "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ABPLAptTupIr",
    "outputId": "59b2e251-fd04-4b17-c518-94d020c8de91"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    1\n",
       "2    0\n",
       "3    1\n",
       "4    1\n",
       "Name: encoded_label, dtype: int64"
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1.encode_ylabel().head() #Encoded label column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "DYqS_GnCuiFY",
    "outputId": "8f2f4b93-8692-4575-a529-27daeb4f7837"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-a2bf3a18-90fc-496e-8532-22870798dc56\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>encoded_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>go jurong point crazy available bugis n great ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>ok lar joking wif u oni</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>free entry wkly comp win fa cup final tkts 21s...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>u dun say early hor u c already say</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>nah dont think go usf life around though</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2bf3a18-90fc-496e-8532-22870798dc56')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-a2bf3a18-90fc-496e-8532-22870798dc56 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-a2bf3a18-90fc-496e-8532-22870798dc56');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "  label                                               text  \\\n",
       "0   ham  Go until jurong point, crazy.. Available only ...   \n",
       "1   ham                      Ok lar... Joking wif u oni...   \n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...   \n",
       "3   ham  U dun say so early hor... U c already then say...   \n",
       "4   ham  Nah I don't think he goes to usf, he lives aro...   \n",
       "\n",
       "                                          clean_text  encoded_label  \n",
       "0  go jurong point crazy available bugis n great ...              1  \n",
       "1                            ok lar joking wif u oni              1  \n",
       "2  free entry wkly comp win fa cup final tkts 21s...              0  \n",
       "3                u dun say early hor u c already say              1  \n",
       "4           nah dont think go usf life around though              1  "
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1.dataframe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tUd9-7CXhf3c"
   },
   "source": [
    "# Part 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "C5mdYT0GMuna"
   },
   "source": [
    "# Train Test Split\n",
    "Over here we are splitting training data set and test data by 70% and 30%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {
    "id": "4EJdnTmxNRQZ"
   },
   "outputs": [],
   "source": [
    "x = p1.clean_text().values # Extracting encoded_label for y values\n",
    "y = p1.encode_ylabel().values # Extracting text for x values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1, test_size = 0.30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JzuZd1MDOseB",
    "outputId": "d0c9dda6-b37d-4685-e976-1811773c4372"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lenght of train data 3610 | Lenght of test data 1548\n"
     ]
    }
   ],
   "source": [
    "print('Lenght of train data', len(x_train),'| Lenght of test data', len(x_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9n5gIfwGPBLN"
   },
   "source": [
    "# Count Vectorizer\n",
    "In order to perform bag of words we use count vectorizer\n",
    "- https://www.educative.io/answers/countvectorizer-in-python\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {
    "id": "0zoX959oTtHu"
   },
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer(binary = True)\n",
    "vectorizer.fit(list(x_train) + list(x_test))\n",
    "\n",
    "x_train_vec = vectorizer.transform( x_train)\n",
    "x_test_vec = vectorizer.transform( x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jnwMg1TL1ons"
   },
   "source": [
    "Mapping of words to feature indices "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "metadata": {
    "id": "dbn-T3230NEC"
   },
   "outputs": [],
   "source": [
    "#vectorizer.vocabulary_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GNCMnDr6AQJ-"
   },
   "source": [
    "As we can see here we have 3900 featues and 8212 words in training dataset followed by 1672 features and 8212 words in test dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NeM5NETkyWx_",
    "outputId": "16ad3ff8-7bac-4f0f-8df0-7a8ed64a3d11"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3610, 8212)\n",
      "(1548, 8212)\n"
     ]
    }
   ],
   "source": [
    "vector = vectorizer.transform(x_train)\n",
    "vector1 = vectorizer.transform(x_test)\n",
    "print(vector.shape)\n",
    "print(vector1.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2Oizq-SKV9dc"
   },
   "source": [
    "# SVM Model\n",
    "Implementing SVM model\n",
    "- As we can see through svm model we are getting an accuracy of 98% which says our model is performing really well\n",
    "\n",
    "https://scikit-learn.org/stable/modules/svm.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aGmzYjkKahjy",
    "outputId": "5bdba7e3-bd09-4792-8989-965b85c01e26"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.86      0.91       186\n",
      "           1       0.98      1.00      0.99      1362\n",
      "\n",
      "    accuracy                           0.98      1548\n",
      "   macro avg       0.98      0.93      0.95      1548\n",
      "weighted avg       0.98      0.98      0.98      1548\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#classify using support vector classifier\n",
    "svm = svm.SVC(kernel = 'linear', probability = True)\n",
    "\n",
    "#Fit the svc model on the training data\n",
    "prob = svm.fit(x_train_vec, y_train).predict_proba(x_test_vec)\n",
    "\n",
    "y_pred_svm = svm.predict(x_test_vec)\n",
    "\n",
    "print(classification_report(y_test, y_pred_svm))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hRDDYOcrhaUZ"
   },
   "source": [
    "# Part 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "K7MI4-glrFLu"
   },
   "source": [
    "### Tokenize and Padding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dNxUYOWpSeRZ"
   },
   "source": [
    "Over here we are tokenizing each word in a sentence and converting into sequences followed by performing padding to equalize the length of vectors in each row of the dataframe by adding 0 in empty column and setting max leghth to fiz the size of vectors "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "P_5F2AIhqpBn",
    "outputId": "4b2055aa-9690-4cbe-efb3-edde7f7a3a12"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "vocab_size: 8275\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    [6, 3350, 247, 523, 559, 977, 41, 58, 312, 978...\n",
       "1    [9, 204, 1109, 313, 1, 1464, 0, 0, 0, 0, 0, 0,...\n",
       "2    [11, 400, 980, 800, 131, 2273, 1110, 560, 2274...\n",
       "3    [1, 132, 56, 242, 2276, 1, 79, 69, 56, 0, 0, 0...\n",
       "4    [741, 7, 33, 6, 682, 96, 112, 326, 0, 0, 0, 0,...\n",
       "Name: messageSequence, dtype: object"
      ]
     },
     "execution_count": 404,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1.tokenize_padding().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "PL-X4mlQq8-W",
    "outputId": "f23cf315-49c1-4b3f-b823-d0fd3bc8d632"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-ac9150a5-c578-4ee7-a554-8a825654f52f\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>encoded_label</th>\n",
       "      <th>messageSequence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>go jurong point crazy available bugis n great ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[6, 3350, 247, 523, 559, 977, 41, 58, 312, 978...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>ok lar joking wif u oni</td>\n",
       "      <td>1</td>\n",
       "      <td>[9, 204, 1109, 313, 1, 1464, 0, 0, 0, 0, 0, 0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>free entry wkly comp win fa cup final tkts 21s...</td>\n",
       "      <td>0</td>\n",
       "      <td>[11, 400, 980, 800, 131, 2273, 1110, 560, 2274...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>u dun say early hor u c already say</td>\n",
       "      <td>1</td>\n",
       "      <td>[1, 132, 56, 242, 2276, 1, 79, 69, 56, 0, 0, 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>nah dont think go usf life around though</td>\n",
       "      <td>1</td>\n",
       "      <td>[741, 7, 33, 6, 682, 96, 112, 326, 0, 0, 0, 0,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac9150a5-c578-4ee7-a554-8a825654f52f')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-ac9150a5-c578-4ee7-a554-8a825654f52f button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-ac9150a5-c578-4ee7-a554-8a825654f52f');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "  label                                               text  \\\n",
       "0   ham  Go until jurong point, crazy.. Available only ...   \n",
       "1   ham                      Ok lar... Joking wif u oni...   \n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...   \n",
       "3   ham  U dun say so early hor... U c already then say...   \n",
       "4   ham  Nah I don't think he goes to usf, he lives aro...   \n",
       "\n",
       "                                          clean_text  encoded_label  \\\n",
       "0  go jurong point crazy available bugis n great ...              1   \n",
       "1                            ok lar joking wif u oni              1   \n",
       "2  free entry wkly comp win fa cup final tkts 21s...              0   \n",
       "3                u dun say early hor u c already say              1   \n",
       "4           nah dont think go usf life around though              1   \n",
       "\n",
       "                                     messageSequence  \n",
       "0  [6, 3350, 247, 523, 559, 977, 41, 58, 312, 978...  \n",
       "1  [9, 204, 1109, 313, 1, 1464, 0, 0, 0, 0, 0, 0,...  \n",
       "2  [11, 400, 980, 800, 131, 2273, 1110, 560, 2274...  \n",
       "3  [1, 132, 56, 242, 2276, 1, 79, 69, 56, 0, 0, 0...  \n",
       "4  [741, 7, 33, 6, 682, 96, 112, 326, 0, 0, 0, 0,...  "
      ]
     },
     "execution_count": 405,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1.dataframe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9eQGLgJurJvV"
   },
   "source": [
    "### Train Test split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "95F-KOqgTPbr"
   },
   "source": [
    "After we are done with padding and tokenizing we are spliiting the message Sequence column into train and test dataset by 70% and 30%\n",
    "- Before peforming split we are inserting all the lists inside a single list \n",
    "- Mounting the list into a single array in order to pass it into our models further"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "metadata": {
    "id": "BqM60I4prOjX"
   },
   "outputs": [],
   "source": [
    "# Extract encoded label \n",
    "y = list(p1.dataframe['encoded_label'])\n",
    "x = list(p1.dataframe['messageSequence'])\n",
    "\n",
    "x_final = np.array(x)\n",
    "y_final = np.array(y)\n",
    "\n",
    "# Split text data into 30 percent test data and 70 percent train data \n",
    "x_train, x_test, y_train, y_test = train_test_split(x_final, y_final, random_state = 1, test_size = 0.30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "W-y0VPHmvJU4"
   },
   "source": [
    "### Golve Pretrained Model\n",
    "\n",
    "As we see we are using a glove pretrained model for our dataset when in our case we can also perform onehot encoding to perform neural net models as we have less data but over here we are trying to do with pretrained word embedding models "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "metadata": {
    "id": "1fEnKjUXvI1v"
   },
   "outputs": [],
   "source": [
    "embeddings_dictionary = dict()\n",
    "\n",
    "glove_file = open('/content/drive/MyDrive/Assignment_3/glove.6B.100d.txt',encoding=\"utf8\")\n",
    "\n",
    "for line in glove_file:\n",
    "    records = line.split()\n",
    "    word = records[0]\n",
    "    vector_dimensions = asarray(records[1:], dtype='float32')\n",
    "    embeddings_dictionary[word] = vector_dimensions\n",
    "\n",
    "glove_file.close()\n",
    "\n",
    "embedding_matrix = zeros((8275, 100)) #This matrix will have 100 rows\n",
    "\n",
    "token = Tokenizer()\n",
    "token.fit_on_texts(p1.clean_text())\n",
    "\n",
    "for word, index in token.word_index.items():\n",
    "    embedding_vector = embeddings_dictionary.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[index] = embedding_vector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uRxHndmex5FT"
   },
   "source": [
    "### LSTM Model\n",
    "1. https://www.tensorflow.org/api_docs/python/tf/keras/layers/Bidirectional\n",
    "https://analyticsindiamag.com/\n",
    "2. https://analyticsindiamag.com/complete-guide-to-bidirectional-lstm-with-python-codes/#:~:text=Bidirectional%20long%2Dshort%20term%20memory,forward(past%20to%20future)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CqbGd-G_x3Nh",
    "outputId": "3772b9f9-b4b2-4a46-9928-ed1e1fff7554"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_21\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_17 (Embedding)    (None, 100, 100)          827500    \n",
      "                                                                 \n",
      " lstm_25 (LSTM)              (None, 128)               117248    \n",
      "                                                                 \n",
      " dense_14 (Dense)            (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 944,877\n",
      "Trainable params: 117,377\n",
      "Non-trainable params: 827,500\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "modelLSTM = Sequential()\n",
    "embedding_layer = Embedding(8275, 100, weights=[embedding_matrix], input_length = 100 , trainable=False)\n",
    "modelLSTM.add(embedding_layer)\n",
    "modelLSTM.add(LSTM(128))\n",
    "modelLSTM.add(Dense(1, activation='sigmoid'))\n",
    "modelLSTM.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "print(modelLSTM.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Ti6jfQ2L0RzB"
   },
   "outputs": [],
   "source": [
    "history = modelLSTM.fit(x_train, y_train, batch_size=128, epochs=13, verbose=1, validation_split=0.2)\n",
    "scoreTest = modelLSTM.evaluate(x_test, y_test, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dDUO0Umf1gM_",
    "outputId": "e55ebe06-e133-407b-91d3-3229d552d87b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: 0.10589306056499481\n",
      "Test Accuracy: 0.9677002429962158\n"
     ]
    }
   ],
   "source": [
    "print(\"Test Score:\", scoreTest[0])\n",
    "print(\"Test Accuracy:\", scoreTest[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 779
    },
    "id": "_Wl5Z0WV1gCE",
    "outputId": "047e95d8-35bb-4626-f906-6065babd5de4"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p1.show_performance_plot(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CxCx_pAQ2CKD"
   },
   "source": [
    "### Bi-LSTM Model\n",
    "This kind of network can be used in text classification, speech recognition and forecasting models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "lrgLNA8m4yih",
    "outputId": "89f9a2c1-04c5-402c-91c4-d166316c9498"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_19\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_15 (Embedding)    (None, 100, 100)          827500    \n",
      "                                                                 \n",
      " bidirectional_11 (Bidirecti  (None, 256)              234496    \n",
      " onal)                                                           \n",
      "                                                                 \n",
      " dropout_4 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_12 (Dense)            (None, 1)                 257       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,062,253\n",
      "Trainable params: 234,753\n",
      "Non-trainable params: 827,500\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "modelBiLSTM = Sequential()\n",
    "embedding_layer = Embedding(8275, 100, weights=[embedding_matrix], input_length = 100 , trainable=False)\n",
    "modelBiLSTM.add(embedding_layer)\n",
    "modelBiLSTM.add(Bidirectional(LSTM(128)))\n",
    "modelBiLSTM.add(Dropout(0.5))\n",
    "modelBiLSTM.add(Dense(1, activation='sigmoid'))\n",
    "modelBiLSTM.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "print(modelBiLSTM.summary()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ckqkEcoK5D1G"
   },
   "outputs": [],
   "source": [
    "history1 = modelBiLSTM.fit(x_train, y_train, batch_size=128, epochs=13, verbose=1, validation_split=0.2)\n",
    "scoreTest1 = modelBiLSTM.evaluate(x_test, y_test, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zcZwL72f59ci",
    "outputId": "390c7898-db36-41bc-d634-3640ff12b0a1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: 0.10048335790634155\n",
      "Test Accuracy: 0.973514199256897\n"
     ]
    }
   ],
   "source": [
    "print(\"Test Score:\", scoreTest1[0])\n",
    "print(\"Test Accuracy:\", scoreTest1[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 779
    },
    "id": "d2aANWie6CmM",
    "outputId": "a81e8664-8e10-452b-8b81-a555883de491"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p1.show_performance_plot(history1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_GPcYO9o6S8-"
   },
   "source": [
    "## Bi-LSTM with activation Layer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0Bhou3JfF8bW",
    "outputId": "293a2e22-08c0-48fd-8d71-94683a6852dd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_20\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_16 (Embedding)    (None, 100, 100)          827500    \n",
      "                                                                 \n",
      " bidirectional_12 (Bidirecti  (None, 100, 64)          34048     \n",
      " onal)                                                           \n",
      "                                                                 \n",
      " attention_7 (Attention)     (None, 100, 64)           164       \n",
      "                                                                 \n",
      " lstm_24 (LSTM)              (None, 32)                12416     \n",
      "                                                                 \n",
      " dense_13 (Dense)            (None, 1)                 33        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 874,161\n",
      "Trainable params: 46,661\n",
      "Non-trainable params: 827,500\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "modelatt = Sequential()\n",
    "modelatt.add(Embedding(8275, 100, weights=[embedding_matrix] , input_length= 100, trainable=False))\n",
    "modelatt.add(Bidirectional(LSTM(32, return_sequences=True)))\n",
    "modelatt.add(Attention(return_sequences=True)) # receive 3D and output 3D\n",
    "modelatt.add(LSTM(32))\n",
    "modelatt.add(Dense(1, activation='sigmoid'))\n",
    "modelatt.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) \n",
    "print(modelatt.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9MSMG8epHR6u"
   },
   "outputs": [],
   "source": [
    "history2 = modelatt.fit(x_train, y_train, batch_size=128, epochs=13, verbose=1, validation_split=0.2)\n",
    "scoreTest2 = modelatt.evaluate(x_test, y_test, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "F0IA6dChq2AR",
    "outputId": "8d409061-2df7-452f-97a5-663fbe4cad18"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: 0.27030855417251587\n",
      "Test Accuracy: 0.7655038833618164\n"
     ]
    }
   ],
   "source": [
    "print(\"Test Score:\", scoreTest2[0])\n",
    "print(\"Test Accuracy:\", scoreTest2[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 779
    },
    "id": "C2R6sIr3rBIo",
    "outputId": "3b7bd5de-9d27-4059-a155-bd6b9a000f71"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhgAAAF9CAYAAABGVRFkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3xUVf7/8dedkjLJJKETIKGjNKnBtipERBAUVFBApYmCiKi4u7q6+nX3Z1uxgTQ7KFIEBUTECihNEKx0UaRLqMkkM0kmmfv745IoKi1OMjPJ+/l4zIPMzJ17zw155L5zzrmfY5imaSIiIiISRLZQN0BERETKHwUMERERCToFDBEREQk6BQwREREJOgUMERERCToFDBEREQk6BQwREREJOgUMERERCToFDBEREQk6BQwRKRODBg3CMAzmzZsXtM8sXboUwzDo1atXsJopIkGigCEiIiJBp4AhIiIiQaeAIVIBGYZB48aNGTduHPXr1yc6OppWrVqxatUq5s6dS4sWLYiNjaVp06bMnTv3uM/u37+fwYMHU7NmTWJiYmjTpg0zZ848bpv8/HzuuusuqlatStWqVRkwYABHjhz5Qzu2bdvGtddeS6VKlXC73fTo0YMtW7b8pXMzTZPnn3+eZs2aERMTQ+3atbnzzjvJzs4+brsZM2bQpk0b4uLiSE1N5fbbb+fw4cPF72dlZXHXXXeRmppKXFwcrVq1YsqUKX+pbSIViikiFQ5gAmbNmjXNG2+80UxLSzMBs1KlSmZsbKx5/fXXmz179jRtNpsZHR1t7ty50zRN08zMzDTr169vAuYll1xi9u3b14yLizMBc8KECcX7HzVqlAmYycnJ5sCBA8127doVH3Pu3LmmaZrmzp07zSpVqpgOh8Ps3bu3ee2115oOh8OsU6eO6fV6TdM0zYEDBx73md9bsmSJCZg9e/Ysfu2ee+4xATM1NdW86aabzCZNmpiAecEFF5h+v980TdOcPXu2CZhVq1Y1Bw8eXHz+F110UfF+unfvbgJmWlqaOXjwYLNKlSomYL7yyivB/c8QKacUMEQqIOC44FBQUGCmpqaagPniiy8Wb3fDDTeYgDljxgzTNE3zP//5jwmYt912W/E2y5YtMwEzKSnJzMvLMzMyMszo6GgzLi7O3LNnj2mapllYWGhedNFFx4WFIUOGmID52muvFe/rqaeeMgFz4sSJpmmeecD4+eefTcMwzFq1aplHjhwxTdM0vV6v2bJlSxMwZ82aZZqmad50000mYM6ZM6f4/C+99FKzefPm5oEDB8z8/HzTbrebiYmJZkFBQfF5Nm/e3Lz11lv/wndepOLQEIlIBRUTE0NKSgoAdrud+vXrA5CWlla8TaNGjQBrWATgww8/BODWW28t3uZvf/sbrVq14ujRo2zYsIH169eTl5dHly5dqFWrFgA2m40GDRocd/yifS1fvpyRI0cycuRIli1bBsD3339fonP66KOPME2TPn36kJSUBEBsbCxDhgwBYMWKFQB06NABgDFjxjBnzhwyMzP55JNPWL9+PVWrVsXpdNK6dWsyMzMZPXo0K1eu5LzzzmP9+vW88MILJWqbSEWjgCEip2SaJgAZGRkAxcGhSHJyMgDZ2dnF29SsWfOk+/zll18AeOWVV5gwYQITJkxg/vz5x713pk6nfQAjR45k7NixHDx4kD59+lCtWjU6derE2rVriz+zcOFCBg0axKuvvsqFF15IlSpVGDVqFB6Pp0RtE6loFDBE5LRVrlwZ+LVHo8jevXsBqFGjRvHF/MCBAyfdV0JCQvFnTWu4tvjxzjvvlFr7iowaNYpt27axbds2nnrqKVavXk16enrxZNQaNWrw2muvcfjwYZYvX07Xrl15/vnnGTFiRInaJlLRKGCIyGnr3LkzAJMnTy5+bdWqVXz33XfUq1ePJk2aFN+B8uGHHxZf6AsLC9m2bdtx++rUqRMA//vf/4pf8/v9PPvss+Tn55eofZdeeimGYTBr1iyOHj0KQG5uLlOnTgWgS5cuANSrV4/ExEQOHDhAw4YNufvuu2nXrh0ej4ft27fzwQcfEB8fT58+fXA6nVx44YU89thjAHz77bclaptIRaOAISKnbfTo0aSkpDBx4kQ6duxI//796dKlC4Zh8PTTTwNWL8KIESPweDy0a9eOwYMHk5aWVjz/ocgjjzyC2+1m7NixXHDBBdx88800a9aM0aNHs2jRohK1r0mTJgwfPpw9e/bQunVrBg4cSJs2bfj222/p2bMnHTt2BKwKoVlZWaSlpTF06FC6devG8uXLqVu3Ls2bN6dTp07UqVOHOXPmkJ6ezi233ELXrl0B6N69e8m/gSIViAKGiJy2KlWqsGLFCvr168d3333HvHnzaNGiBQsWLOCaa64p3u7xxx/n7rvvJjc3lwULFnD22Wdz5513Hrevpk2b8sUXX9CrVy82btzI9OnTqVSpErNnz6Znz54lbuP48eN54okncDgczJw5E5/Px/33389bb71VvM3//d//MW7cOOLi4pg2bRrffPMNffv2ZfHixURHRxMdHc3SpUsZMmQIGzZsYNq0adjtdh577DEeeeSRErdNpCIxzKLZWyIiIiJBoh4MERERCToFDBEREQk6BQwREREJOgUMERERCToFDBEREQk6BQwREREJOkeoGxAKgUCAI0cOExMTi2EYoW6OiIhIxDBNk9xcH5UqVcZmO3E/RYUMGEeOHGbk8KGhboaIiEjEGj/5ZapUqXrC9ytkwIiJiQWsb05srCvErREREYkcPp+XkcOHFl9LT6RCBoyiYZHYWBculwKGiIjImTrVFANN8hQREZGgU8AQERGRoFPAEBERkaCrkHMwTsU0TQoKCigsLAx1UyKC3W7H4XDoll8RESmmgPE7+fn57Nu3D6/XG+qmRBSXy0VycjJRUVGhboqIiIQBBYzfCAQCbN++HbvdTq1atYiKitJf5adgmib5+fkcOHCA7du307hx45MWXhERkYpBAeM38vPzCQQCpKSk6PbVMxAbG4vT6WTHjh3k5+cTExMT6iaJiEiI6U/NP6G/wM+cvmciIvJbuiqIiIhI0GmIJAiy800O+QLEOg2qu5TZREREdDUMAl+ByQGvyWGfGeqmlEhubi4pKSmMHDky1E0REZFyQgEjCNxR1p0mOX6TwkBoQsagQYNKfMdLTEwMkydP5o477ghyq0REpKLSEEkQRNshyg75hVbISIgOr1tbA4HAKSdhdu/evYxaIyIiFYF6ME7BNE1y8k/+8PrBboDPb/JLTuCU25/uwzRPrzekXr16TJ06FbBWt+vYsSOGYXDbbbeRlJTEu+++i9/v595776VWrVrExcVxySWXsH79+uJ9GIbBoEGDAHj44YcxDIOJEyeSmppKYmIit91222m3R0RERD0Yp+D1Q/yzR0Jy7Oy7KxF3GoUxH330UcaPH88XX3zBpEmT+Oqrr/jss8/4/PPP+de//kWLFi145JFHePLJJxk6dCiNGzfmmWeeoXfv3mzevPmE+x03bhwjRozgo48+YvLkyfTs2ZOuXbsG8QxFRKS8Ug9GOXDDDTdw1llnATB8+HBq1aoFwIwZM7j33ntp1KgRffr0YdmyZbzwwgsMGDCAPn36sGXLFg4cOHDC/c6aNYv77ruPsWPHAvD999+X/smIiEi5oB6MU3A5rZ6E07H+YAH5BdCgko2k6L+e3VzOv/b5hISE4q/r1KnDo48+Snp6On6/v/j1nJwcqlWr9qefT0xMBMDtdhdvKyIicjoUME7BMIzTGqYAqBln44DXJGBCXFR4TfS85557eOutt7jvvvtIS0vjrbfeYsaMGaFuloiIlFMKGEHkjjI44DXJyi/7yZBFt6gGAoE/fX/NmjW0bt2aRx99FIAVK1aUWdtERKTiUcAIoqJ6GD4/+AtNnPay68WoUaMGAKNHjyYjI+MP77ds2ZLZs2fz0EMP4fF4mDBhAsBxwyUiIiLBokmeQeS0G8Qei2yeMu7FuPXWW2nevDmvvvoqe/fu/cP7zzzzDJdddhnPPPMMy5cvL67a+dNPP5VpO0VEpGJQD0aQuaMNfAUmnnyTyrFld9wGDRocV9fi92rWrMn7779/3GvPPPNM8de/rXHx8MMP8/DDDxc/r1evnmpgiIjIGVEPRpAVDZOUdQ+GiIhIOFHACLKigJFbAPmFChkiIlIxKWAEmcNmFNevUC+GiIhUVAoYpSBBwyQiIlLBKWCUAvex1VSz8hQwRESkYgrpXSSrV61k+ptTyfZ4aNsujaHDRhAdHf2H7Xb8vJ0H7vs7va7pTe/r+gEwoH+f42o4/OO+B2jbLq3M2n4y8U4Dw7CWb88rMIl2hFdVTxERkdIWsoDh8WQxacJYBgweStOmzXji0f/y4aKFXNXrmuO2CxQW8uLkCcfdJpnt8eD3+3niqeeoWrUqADExZXhP6CnYbQZxToPsfKuqZzUFDBERqWBCNkTy47ZtBAIBOqV3JrlWbdqldWDTxg1/2O799xcQFRVF3br1il87ctRaPj25ZjJxcfHExcVjt9vLqumnxX1s/RLNwxARkYooZAEjKyuT6JiY4jU0XC4Xnqys47bJ2L+f+e+8zS3Dbgfj116AI4cPYxg2HnrgXu4YcQtvvjHlpIWg/H4/Xq+3+OHzeUvnpH7jtxM9VaRKREQqmvCq5Pm7kYSXX5xItx5XUqt27eNer5OSyo0DBtGseQsOHMjg+eeeplHjJpx73gV/utv5c+fw9uxZpdXqPxUXZc3D8BdaNTFi/+LS6yIiIpEkZAHD7Xbj8/oIBALYbDZ8Xh+JiYnF7/+wdQvff/ct237YysJ355Gbm8vuXTtxOqO4rEtXLrqkI253AvXqNyA1tR47d+w4YcDoeXVvrujRs/i5z+dl5PChpXp+NsMgPsrAk2eVDY91lu48jEGDBjF16tS/3FsyZcoUBg8ezJIlS+jYsWNwGiciIhVOyAJGw0ZNsNttfPLxB7Q8pzXr1q6h8+VdCRQWYrPbqVuvPuMmvFC8/Zj/PUbzFi3p3OVyli/7jLlvz+b+Bx/G5/Oxe/dOrux19QmP5XQ6cTrLvgsh4VjAyMo3qR5X5ocXEREJmZDNwUhISGD47aNY+O58/n3f32ly1tlc1qUbT495goUL5hMVFUW16jWKHw6Hg7i4OOLi4km/9DLatGvPfx66n6f+9xiXd+txwt6Lv8w0Id9boocbLza/l5ycHMy8nDPfx2n2RtSrV4+pU6cCYBgGS5cuZdmyZaSlpREXF0fbtm355JNPirdfvHgxaWlpuFwuGjVqxKRJkwCrF2Tw4MEAdOrU6bgFz0RERM6EYVbAGYher5ebB/bnlanTcblcxa/n5uayfft26tevT0xMjPVivhceahGahv53PUS5TrnZm2++yfjx4/niiy+YNGkSzZo14/LLL6dNmzb07t2b999/n+XLl7N161bi4+NJTU0lJSWFW265hffff59PP/2URYsWER0dzZQpU3j99de5++676d+/P+3btz+tpv7p905ERMqdE11Df0+VPMuBG264gbPOOguA4cOH89ZbbxEIBHj55Ze57rrrGDt2LHl5ecyYMYPt27eTk5PDkCFDGD16NLNnz+aBBx7A6XTSqVMnOnXqBMBVV1112uFCRETk98LrLpJw5Iy1ehJKaH9OgD2eAAlRBo0qn2GtDmfJiod988035Ofn07x58+Ne3759O23atKFLly7cf//9LF68mG7dunHnnXdSrVq1Eh1LRETkzyhgnIphnNYwxYm4DZNAbiFZBgScdmxG6Vf1NAwDt9vN9OnTj3s9JSUFm83GBx98wEcffcTChQt58skneeihh/j0009p165dqbdNREQqBg2RlLJYB9htEAiA13/q7UuqqGBZIBCgWbNmeDwe6tSpQ48ePejRowcpKSm0atWKRYsWMXjwYM466yzGjRvHV199RWZmJq+99tof9iMiIlJS6sEoZYZh4I4yOJpr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\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p1.show_performance_plot(history2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iNX0ffWdl7cE"
   },
   "source": [
    "On Running \n",
    "1. SVM model - using Count Vectorizer - getting an accuracy of 98%\n",
    "\n",
    "2. LSTM model - using glove word embedding technique \n",
    "- Accuracy = 0.96, Loss = 0.11 | Validation_accuracy = 0.97, Loss = 0.10\n",
    "3. Bi-LSTM model - using glove word embedding technique \n",
    "- Accuracy = 0.98, Loss = 0.06 | Validation_accuracy = 0.97, Loss = 0.09 \n",
    "3. Bi-LSTM model with attention - using glove word embedding technique \n",
    "- Accuracy = 0.92, Loss = 0.16 | Validation_accuracy = 0.92 ,Loss = 0.23\n",
    "\n",
    "\n",
    "- As per the results I would go with Bi-lstm model as it gives better accuracy and lesser loss rate in neural net and svm under ML algorithm gives a better accuracy\n",
    "\n",
    "Insights \n",
    "- Not removing duplicates makes a significant difference in accuracy(decreases)\n",
    "- We can do lstm without using pretrained model as we have lesser data\n",
    "\n",
    "Productionalizing my model \n",
    "- Data Storage and Retrivel - As I have less data I wont opt for any cloud storage or issues related to large data \n",
    "- Selecting Tools and framework to  use and research on best tool to use(like how many platform suppot the tool)\n",
    "- Checking the popularity of the tool to use the latest one\n",
    "- By getting feedback from model once its implemeted production system in order to look for any perforamce issues\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Assignment_SanchanaMohankumar.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "12fee48283b64e6da6ef0e2320817487": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "299a58ce33d54e8d9aa45eb1ac5bf32b": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": "2",
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "35bd378e557646fb8f302ce2ebc6b914": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_12fee48283b64e6da6ef0e2320817487",
      "placeholder": "​",
      "style": "IPY_MODEL_3ef763d244644aa69d7c368359fa7fb3",
      "value": " [100%]   00:00 -&gt; (00:00 left)"
     }
    },
    "3ef763d244644aa69d7c368359fa7fb3": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "527311998d024e359dd34e925411d739": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": "inline-flex",
      "flex": null,
      "flex_flow": "row wrap",
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": "100%"
     }
    },
    "7ab13ccd7a5944eaa920923eb8143bdb": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_bc579b4c30804ac2bd8574a608616659",
       "IPY_MODEL_99bb7bb3e4c346b1aede7f787e2514e4",
       "IPY_MODEL_35bd378e557646fb8f302ce2ebc6b914"
      ],
      "layout": "IPY_MODEL_527311998d024e359dd34e925411d739"
     }
    },
    "95e44dfbf6e341a0a40832e6b2952577": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "99bb7bb3e4c346b1aede7f787e2514e4": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_299a58ce33d54e8d9aa45eb1ac5bf32b",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_95e44dfbf6e341a0a40832e6b2952577",
      "value": 1
     }
    },
    "9f577cca3a654a17b73db13448d6d9b4": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "bc579b4c30804ac2bd8574a608616659": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_9f577cca3a654a17b73db13448d6d9b4",
      "placeholder": "​",
      "style": "IPY_MODEL_c800b1ed53c14d379f5f763f758ec802",
      "value": "Done! Use &#x27;show&#x27; commands to display/save.   "
     }
    },
    "c800b1ed53c14d379f5f763f758ec802": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
